const axios = require("axios")
const base_url = "https://discord.com/api"

class command {
    constructor({token}){
        this.token = token
    }
    async create(params) {
        if (!this.application) this.application = await (new (require("./user.js"))({ token: this.token })).me.application();
        let url = params?.guild_id ? `/applications/${this.application.id}/guilds/${params.guild_id}/commands` : `/applications/${this.application.id}/commands`
        
        return (await axios({
            method: 'post',
            url: base_url+url,
            data: JSON.stringify(params),
            headers: {
                Authorization: `Bot ${this.token}`,
                'content-type': 'application/json'
            }
        }).catch(function (error) {
            if (error.response) {
              throw new Error (JSON.stringify({
                statusCode: error.response.status,
                data: error.response.data
              },null,4))
            } else {
              throw new Error("Opse something unknown happened! :(")
            }
          }))?.data
    }

    async get(params) {
        if (!this.application) this.application = await (new (require("./user.js"))({ token: this.token })).me.application();
        let url = params?.guild_id ? `/applications/${this.application.id}/guilds/${params.guild_id}/commands`+ `${params?.command_id ?`/${params.command_id}`: ''}` : `/applications/${this.application.id}/commands`+ `${params?.command_id ?`/${params.command_id}`: ''}`
        
        return (await axios({
            method: 'get',
            url: base_url+url,
            headers: {
                Authorization: `Bot ${this.token}`,
                'content-type': 'application/json'
            }
        }).catch(function (error) {
            if (error.response) {
              throw new Error (JSON.stringify({
                statusCode: error.response.status,
                data: error.response.data
              },null,4))
            } else {
              throw new Error("Opse something unknown happened! :(")
            }
          }))?.data
        
    }
    async edit(params) {
        if (!this.application) this.application = await (new (require("./user.js"))({ token: this.token })).me.application();
        let url = params?.guild_id ? `/applications/${this.application.id}/guilds/${params.guild_id}/commands/${params.command_id}` : `/applications/${this.application.id}/commands/${params.command_id}`
        
        return (await axios({
            method: 'patch',
            url: base_url+url,
            data: JSON.stringify(params),
            headers: {
                Authorization: `Bot ${this.token}`,
                'content-type': 'application/json'
            }
        }).catch(function (error) {
            if (error.response) {
              throw new Error (JSON.stringify({
                statusCode: error.response.status,
                data: error.response.data
              },null,4))
            } else {
              throw new Error("Opse something unknown happened! :(")
            }
          }))?.data
    }
    async delete(params) {
        if (!this.application) this.application = await (new (require("./user.js"))({ token: this.token })).me.application();
        let url = params?.guild_id ? `/applications/${this.application.id}/guilds/${params.guild_id}/commands/${params.command_id}` : `/applications/${this.application.id}/commands/${params.command_id}`
        
        return (await axios({
            method: 'delete',
            url: base_url+url,
            headers: {
                Authorization: `Bot ${this.token}`,
                'content-type': 'application/json'
            }
        }).catch(function (error) {
            if (error.response) {
              throw new Error (JSON.stringify({
                statusCode: error.response.status,
                data: error.response.data
              },null,4))
            } else {
              throw new Error("Opse something unknown happened! :(")
            }
          }))?.status
    }
    async bulk_overwrite(params) {
        if (!this.application) this.application = await (new (require("./user.js"))({ token: this.token })).me.application();
        let url = params?.guild_id ? `/applications/${this.application.id}/guilds/${params.guild_id}/commands` : `/applications/${this.application.id}/commands`
        
        return (await axios({
            method: 'put',
            url: base_url+url,
            data: JSON.stringify(params?.commands),
            headers: {
                Authorization: `Bot ${this.token}`,
                'content-type': 'application/json'
            }
        }).catch(function (error) {
            if (error.response) {
              throw new Error (JSON.stringify({
                statusCode: error.response.status,
                data: error.response.data
              },null,4))
            } else {
              throw new Error("Opse something unknown happened! :(")
            }
          }))?.data
    }
    async get_permission(params) {
        if (!this.application) this.application = await (new (require("./user.js"))({ token: this.token })).me.application();
        let url = params?.command_id ? `/applications/${this.application.id}/guilds/${params.guild_id}/commands/${params.command_id}/permissions` : `/applications/${this.application.id}/guilds/${params.guild_id}/commands/permissions`
        return (await axios({
            method: 'get',
            url: base_url+url,
            headers: {
                Authorization: `Bot ${this.token}`,
                'content-type': 'application/json'
            }
        }).catch(function (error) {
            if (error.response) {
              throw new Error (JSON.stringify({
                statusCode: error.response.status,
                data: error.response.data
              },null,4))
            } else {
              throw new Error("Opse something unknown happened! :(")
            }
          }))?.data
    }
}

module.exports = command