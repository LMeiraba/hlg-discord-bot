const axios = require("axios")
const qs = require('querystring')
class OAuth {
    constructor ({client_id,client_secret,redirect_uri}){
        this.client_id = client_id
        this.client_secret = client_secret
        this.redirect_uri = redirect_uri
    }
    async authorize(code) {
        return (await axios({
            method: 'post',
            url: `https://discord.com/api/oauth2/token`,
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded'
            },
            data: qs.stringify({
                client_id: this.client_id,
                client_secret: this.client_secret,
                redirect_uri: this.redirect_uri,
                grant_type: 'authorization_code',
                code: code,
            })
        }).then(r => {
            if (r.status === 200) {
                this.access_token = r.data.access_token
                this.refresh_token = r.data.refresh_token
                this.expires_in = r.data.expires_in
                this.scope = r.data.scope
                this.token_type = r.data.token_type
                this.params = r.data
            }
            return r.data
        }).catch(function (error) {
            if (error.response) {
              throw new Error (JSON.stringify({
                statusCode: error.response.status,
                data: error.response.data
              },null,4))
            } else {
              throw new Error("Opse something unknown happened! :(")
            }
          }))
    }
    async refresh(refresh_token) {
        return (await axios({
            method: 'post',
            url: `https://discord.com/api/oauth2/token`,
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded'
            },
            data: qs.stringify({
                client_id: this.client_id,
                client_secret: this.client_secret,
                redirect_uri: this.redirect_uri,
                grant_type: 'refresh_token',
                refresh_token: refresh_token,
            })
        }).then(r => {
            if (r.status === 200) {
                this.access_token = r.data.access_token
                this.refresh_token = r.data.refresh_token
                this.expires_in = r.data.expires_in
                this.scope = r.data.scope
                this.token_type = r.data.token_type
                this.params = r.data
            }
            return r.data
        }).catch(function (error) {
            if (error.response) {
              throw new Error (JSON.stringify({
                statusCode: error.response.status,
                data: error.response.data
              },null,4))
            } else {
              throw new Error("Opse something unknown happened! :(")
            }
          }))
    }
    async owner(scope) {
        return (await axios({
            method: 'post',
            url: `https://discord.com/api/oauth2/token`,
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded'
            },
            data: qs.stringify({
                client_id: this.client_id,
                client_secret: this.client_secret,
                redirect_uri: this.redirect_uri,
                grant_type: 'client_credentials',
                scope: scope
            })
        }).then(r => {
            if (r.status === 200) {
                this.access_token = r.data.access_token
                this.refresh_token = r.data.refresh_token
                this.expires_in = r.data.expires_in
                this.scope = r.data.scope
                this.token_type = r.data.token_type
                this.params = r.data
            }
            return r.data
        }).catch(function (error) {
            if (error.response) {
              throw new Error (JSON.stringify({
                statusCode: error.response.status,
                data: error.response.data
              },null,4))
            } else {
              throw new Error("Opse something unknown happened! :(")
            }
          }))
    }
}
module.exports = OAuth