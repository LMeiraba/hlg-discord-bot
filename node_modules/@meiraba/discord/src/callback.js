const axios = require("axios")
const FormData = require("form-data");

class callback{
    constructor(event){
        if(!event?.id || !event?.token) throw "Invalid id/token provided for callback."
        this.event = event
        this.command_defer
        if(event.type && event.data) {
          let type = 
            (event.type === 1)?'verify' 
          : (event.type === 2)?(event.data.type === 1)?'slash_command':(event.data.type === 2)?'user_context_menu':(event.data.type === 3)?'message_context_menu':''
          : (event.type === 3)?(event.data.component_type === 2)?'button':(event.data.component_type === 3)?'string_select':(event.data.component_type === 5)?'user_select':(event.data.component_type === 6)?'role_select':(event.data.component_type === 7)?'mentionable_select':(event.data.component_type === 8)?'channel_select':''
          : (event.type === 4)?'autocomplete'
          : (event.type === 5)? 'modal_submit'
          : ''
          this.type = type
        }
    }
    async command_reply(params) {
        return(await send(this.event,params,4))
    }
    async command_defer(params) {
        return(await send(this.event,params,5))
    }
    async component_defer() {
        return(await send(this.event,{},6))
    }
    async component_update(params) {
        return(await send(this.event,params,7))
    }
    async autocomplete(params) {
        return(await send(this.event,params,8))
    }
    async form_modal(params) {
        let text_styles = {
            short: 1,
            paragraph: 2,
            long: 2,
        };
        if (params?.text_inputs?.length > 5)
            throw ('Only 5 Text Input components allowed.');
        let components = [];
        for (let i = 0; i < params?.text_inputs?.length; i++) {
            components.push({
              type: 1,
              components: [
                {
                  type: 4,
                  style: text_styles[`${params.text_inputs[i].style.toLowerCase()}`],
                  custom_id: params.text_inputs[i].custom_id,
                  label: params.text_inputs[i].label,
                  placeholder: params.text_inputs[i]?.placeholder ?? null, // optional
                  value: params.text_inputs[i]?.value ?? null, // optional
                  required: params.text_inputs[i]?.required ?? false, // optional
                  min_length: params.text_inputs[i]?.min_length ?? null, // optional
                  max_length: params.text_inputs[i]?.max_length ?? null, // optional
                },
              ],
            });
        }
        params.components = components;
        delete params.text_input;
        let r = await axios({
            method: "post",
            url: `https://discord.com/api/interactions/${this.event.id}/${this.event.token}/callback`,
            data: {
              type: 9,
              data: params,
            },
            headers: { 
                "Content-Type": "application/json",
            },
          }).catch(function (error) {
            if (error.response) {
              throw new Error (JSON.stringify({
                statusCode: error.response.status,
                data: error.response.data
              },null,4))
            } else {
              throw new Error("Opse something unknown happened! :(")
            }
          })
        if (r.status !== 200 && r.status !== 204) {
            throw new Error(r.data);
        }else if(r.headers['content-type'] === 'application/json') {
            return r.data
        }else {
            return true
        }
    }
    async raw(params,type) {
        let r = await axios({
            method: 'post',
            url: `https://discord.com/api/interactions/${this.event.id}/${this.event.token}/callback`,
            data: JSON.stringify({
                type: type,
                data: params
            }),
            headers: {
              'Content-Type': 'application/json',
            },
        }).catch(function (error) {
          if (error.response) {
            throw new Error (JSON.stringify({
              statusCode: error.response.status,
              data: error.response.data
            },null,4))
          } else {
            throw new Error("Opse something unknown happened! :(")
          }
        }) 
        if (r.status !== 200 && r.status !== 204) {
            throw (r.data);
          } else if (r.headers['content-type'] === 'application/json') {
            return r.data;
          } else {
            return true;
          }
    }
}
module.exports = callback

async function send(event,params, type) {
    if (params?.ephemeral) {
        params.flags = 64;
        delete params.ephemeral
      }
      let form = new FormData();
      if (params?.attachments && params?.attachments?.length) {
        for (let i = 0; i < params.attachments.length; i++) {
          form.append(`files[${i}]`, params.attachments[i].buffer, {
            filename: params.attachments[i].name,
          });
        }
        params.attachments = params.attachments.map((a, index) => ({
          id: index,
          filename: a.name,
          description: a.description ? a.description : '',
        }));
      }
      form.append('payload_json',Buffer.from(JSON.stringify({
            type: type,
            data: params,
          }))
      );
      let r = await axios({
        method: 'post',
        url: `https://discord.com/api/interactions/${event.id}/${event.token}/callback`,
        data: form,
        headers: {
          'Content-Type': 'multipart/form-data',
        },
      }).catch(function (error) {
        if (error.response) {
          throw new Error (JSON.stringify({
            statusCode: error.response.status,
            data: error.response.data
          },null,4))
        } else {
          throw new Error("Opse something unknown happened! :(")
        }
      })
      if (r.status !== 200 && r.status !== 204) {
        throw (r.data);
      } else if (r.headers['content-type'] === 'application/json') {
        return r.data;
      } else {
        return true;
      }
}