const axios = require("axios")
const FormData = require("form-data");
class followup{
    constructor(event){
        if(!event?.application_id || !event?.token) throw "Invalid application_id/token provided for followup."
        this.event = event
    }
    async edit_original(params) {
        return(await send(this.event,params,'patch','@original'))
    }
    async get_original() {
        return(await send(this.event,{},'get','@original'))
    }
    async delete_original() {
        return(await send(this.event,{},'delete','@original'))
    }
    async create(params) {
        return(await send(this.event,params,'post',''))
    }
    async edit(params) {
        if (!params?.message_id) throw ("'message_id' is required.");
        return(await send(this.event,params,'patch',params.message_id))
    }
    async get(params) {
        if (!params?.message_id) throw ("'message_id' is required.");
        return(await send(this.event,{},'get',params.message_id))
    }
    async delete(params) {
        if (!params?.message_id) throw ("'message_id' is required.");
        return(await send(this.event,{},'delete',params.message_id))
    }
}
module.exports = followup

async function send(event,params,method,message_id) {
    let form = new FormData();
    if (params?.ephemeral) {
        params.flags = 64;
        delete params.ephemeral
    }
    if (params?.attachments && params?.attachments?.length) {
        for (let i = 0; i < params.attachments.length; i++) {
          form.append(`files[${i}]`, params.attachments[i].buffer, {
            filename: params.attachments[i].name,
          });
        }
        params.attachments = params.attachments.map((a, index) => ({
          id: index,
          filename: a.name,
          description: a.description ? a.description : '',
        }));
    } 
    form.append('payload_json', Buffer.from(JSON.stringify(params)));
    let r = await axios({
        method: method,
        url: `https://discord.com/api/webhooks/${event.application_id}/${event.token}` + (method === 'post' ? '' : `/messages/${message_id}`),
        data: form,
        headers: {
          'Content-Type': 'multipart/form-data',
        },
    }).catch(function (error) {
        if (error.response) {
          throw new Error (JSON.stringify({
            statusCode: error.response.status,
            data: error.response.data
          },null,4))
        } else {
          throw new Error("Opse something unknown happened! :(")
        }
    })
    if (r.status !== 200 && r.status !== 204) {
        throw (r.data);
    } else if (r.headers['content-type'] === 'application/json') {
        return r.data;
    } else {
        return true;
    }
}