const axios = require("axios");
const basedOn = require("./basedOn.json")

module.exports = class hlg {
    constructor() {
        this.now = {}
    }
    async start(id,options) {
        if (!id) throw "An id of the game is required."
        this.baseUrl = basedOn[options?.basedOn] ?? (function(){let keys = Object.keys(basedOn);return basedOn[keys[ keys.length * Math.random() << 0]]})()
        if (!this.now?.[id]?.data) {
            let data = (await axios.get(this.baseUrl)).data
            if (data.game){
                data = {
                    title: data.title,
                    description: data.description,
                    verb: data.game.strings.verb,
                    value: data.game.strings.valueTitle,
                    prefix: data.game.strings.valuePrefix ?? '',
                    suffix: data.game.strings.valueSuffix ?? '',
                    info: data.game.data.map(d => {
                        return {
                            title: d[0],
                            count: d[1],
                            image: d[2]
                        }
                    })
                }
            }else {
                data = {
                    title: 'Google Search',
                    description: `Guess which one gets googles more.`,
                    verb: 'has',
                    value: 'average monthly searches',
                    prefix: '',
                    suffix: '',
                    info: data.map(d => {
                        return {
                            title: d.keyword,
                            count: d.searchVolume,
                            image: `http://api.higherlowergame.com/_client/images/general/${d.image}`
                        }
                    })
                }
            }
            let data1 = data.info[Math.floor(Math.random()*data.info.length)]
            let data2 = data.info.filter(d => (d.title !== data1.title) && (d.count !== data1.count))[Math.floor(Math.random()*(data.info.length-1))]
            if (data1.image.includes('.svg')) {
                data1.image = await svg_png(data1.image)
            }
            if (data2.image.includes('.svg')) {
                data2.image = await svg_png(data2.image)
            }
            this.now[id] = {
                data: data,
                vs: [data1,data2],
                score: 0
            }
            return this.now[id]
        }else return (await this.next(id))
    }
    async next(id) {
        if (!id) throw "An id of the game is required."
        if (this.now?.[id]?.data) {
            let data = this.now[id].data.info.filter(d => (d.title !== this.now[id].vs[0].title) || (d.title !== this.now[id].vs[1].title))
            let data1 = data[Math.floor(Math.random()*data.length)]
            //let data2 = data.filter(d => (d.title !== data1.title) || (d.count !== data1.count))[Math.floor(Math.random()*(data.length-1))]
            if (data1.image.includes('.svg')) {
                data1.image = await svg_png(data1.image)
            }
            // if (data2.image.includes('.svg')) {
            //     data2.image = await svg_png(data2.image)
            // }
            this.now[id].vs[0] = this.now[id].vs[1]
            this.now[id].vs[1] = data1
            return this.now[id]
        }else return (await this.start(id))
    }
    async check(id,condition) {
        if (!id) throw "An id of the game is required."
        if (this.now?.[id]?.data) {
            if ((this.now[id].vs[1].count > this.now[id].vs[0].count) === condition) this.now[id].score += 1
            return (this.now[id].vs[1].count > this.now[id].vs[0].count) === condition
        }else return (await this.start(id))
    }
    async end(id) {
        if (!id) throw "An id of the game is required."
        delete this.now?.[id]
        if (!this.now?.[id]) return true
    }
}

async function svg_png(url) {
    return (await axios.get(`https://untitled-xq2phrs90bbj.runkit.sh/?url=${url}`)).data.link
}
